// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Data;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230216165753_first")]
    partial class first
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AlertasApplicationUser", b =>
                {
                    b.Property<int>("AlertasId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AlertasId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("AlertasApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c611d808-b15c-4f18-ba1f-5ed9a4b38dd6",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "6cda8944-fd9b-4998-a5c9-c3469fd90796",
                            RoleId = "c611d808-b15c-4f18-ba1f-5ed9a4b38dd6"
                        },
                        new
                        {
                            UserId = "2a93c694-5d4e-4404-8b03-2c18a5600c5c",
                            RoleId = "c611d808-b15c-4f18-ba1f-5ed9a4b38dd6"
                        },
                        new
                        {
                            UserId = "91ba41fa-2435-47db-98c2-2750107df18f",
                            RoleId = "c611d808-b15c-4f18-ba1f-5ed9a4b38dd6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebApp.Data.NavigationMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControllerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("ExternalUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsExternal")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NotAnActionOrController")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ParentMenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Visible")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ParentMenuId");

                    b.ToTable("AspNetNavigationMenus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("17b0525f-23fc-4eb9-9230-def955f15798"),
                            ActionName = "",
                            ControllerName = "Admin",
                            DisplayOrder = 1,
                            IsExternal = false,
                            Name = "Admin",
                            NotAnActionOrController = false,
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("53b8b282-5a2d-472d-afd2-70da3f273c3d"),
                            ActionName = "Users",
                            ControllerName = "Admin",
                            DisplayOrder = 2,
                            IsExternal = false,
                            Name = "Utilizadores",
                            NotAnActionOrController = false,
                            ParentMenuId = new Guid("17b0525f-23fc-4eb9-9230-def955f15798"),
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("bdb1a8c8-05f0-4d2c-a5d6-3b900b9a9f13"),
                            ActionName = "Roles",
                            ControllerName = "Admin",
                            DisplayOrder = 1,
                            IsExternal = false,
                            Name = "Perfis",
                            NotAnActionOrController = false,
                            ParentMenuId = new Guid("17b0525f-23fc-4eb9-9230-def955f15798"),
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("346af19e-187f-412b-9ec6-b886b90de93c"),
                            ActionName = "Menus",
                            ControllerName = "Admin",
                            DisplayOrder = 3,
                            IsExternal = false,
                            Name = "Menus",
                            NotAnActionOrController = false,
                            ParentMenuId = new Guid("17b0525f-23fc-4eb9-9230-def955f15798"),
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("a7aa2d78-e3ed-42f5-8a89-ba42520eb7a7"),
                            ActionName = "",
                            ControllerName = "Tecnologias",
                            DisplayOrder = 2,
                            IsExternal = false,
                            Name = "Tecnologias",
                            NotAnActionOrController = false,
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("8ede136e-52c1-4e6d-9e08-9a367ef3d8b2"),
                            ActionName = "Index",
                            ControllerName = "Tecnologias",
                            DisplayOrder = 1,
                            IsExternal = false,
                            Name = "Lista",
                            NotAnActionOrController = false,
                            ParentMenuId = new Guid("a7aa2d78-e3ed-42f5-8a89-ba42520eb7a7"),
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("84cf7f95-3c25-4b7a-952f-513adf6f0a2a"),
                            ActionName = "MonitorizacaoPage",
                            ControllerName = "Tecnologias",
                            DisplayOrder = 2,
                            IsExternal = false,
                            Name = "Monitorização",
                            NotAnActionOrController = false,
                            ParentMenuId = new Guid("a7aa2d78-e3ed-42f5-8a89-ba42520eb7a7"),
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("50db0ac2-6195-4c1a-95d9-8d6a7100c783"),
                            ActionName = "",
                            ControllerName = "Tipos",
                            DisplayOrder = 3,
                            IsExternal = false,
                            Name = "Tipos de Tecnologias",
                            NotAnActionOrController = false,
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("43cbcdcf-ca91-4132-abaf-09dff23d5655"),
                            ActionName = "Index",
                            ControllerName = "Tipos",
                            DisplayOrder = 1,
                            IsExternal = false,
                            Name = "Lista",
                            NotAnActionOrController = false,
                            ParentMenuId = new Guid("50db0ac2-6195-4c1a-95d9-8d6a7100c783"),
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("b7ca7bba-de41-4233-8c23-0e8df61742f8"),
                            ActionName = "",
                            ControllerName = "EstadoTecnologias",
                            DisplayOrder = 4,
                            IsExternal = false,
                            Name = "Estados de Tecnologias",
                            NotAnActionOrController = false,
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("81f469a2-cd01-4b84-89cc-cb476fd7d0c5"),
                            ActionName = "Index",
                            ControllerName = "EstadoTecnologias",
                            DisplayOrder = 1,
                            IsExternal = false,
                            Name = "Lista",
                            NotAnActionOrController = false,
                            ParentMenuId = new Guid("b7ca7bba-de41-4233-8c23-0e8df61742f8"),
                            Visible = true
                        });
                });

            modelBuilder.Entity("WebApp.Data.RoleMenuPermission", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("NavigationMenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Get")
                        .HasColumnType("bit");

                    b.Property<bool?>("Post")
                        .HasColumnType("bit");

                    b.HasKey("RoleId", "NavigationMenuId");

                    b.HasIndex("NavigationMenuId");

                    b.ToTable("AspNetRoleMenuPermissions");

                    b.HasData(
                        new
                        {
                            RoleId = "c611d808-b15c-4f18-ba1f-5ed9a4b38dd6",
                            NavigationMenuId = new Guid("17b0525f-23fc-4eb9-9230-def955f15798")
                        },
                        new
                        {
                            RoleId = "c611d808-b15c-4f18-ba1f-5ed9a4b38dd6",
                            NavigationMenuId = new Guid("53b8b282-5a2d-472d-afd2-70da3f273c3d")
                        },
                        new
                        {
                            RoleId = "c611d808-b15c-4f18-ba1f-5ed9a4b38dd6",
                            NavigationMenuId = new Guid("bdb1a8c8-05f0-4d2c-a5d6-3b900b9a9f13")
                        },
                        new
                        {
                            RoleId = "c611d808-b15c-4f18-ba1f-5ed9a4b38dd6",
                            NavigationMenuId = new Guid("346af19e-187f-412b-9ec6-b886b90de93c")
                        },
                        new
                        {
                            RoleId = "c611d808-b15c-4f18-ba1f-5ed9a4b38dd6",
                            NavigationMenuId = new Guid("a7aa2d78-e3ed-42f5-8a89-ba42520eb7a7")
                        },
                        new
                        {
                            RoleId = "c611d808-b15c-4f18-ba1f-5ed9a4b38dd6",
                            NavigationMenuId = new Guid("8ede136e-52c1-4e6d-9e08-9a367ef3d8b2")
                        },
                        new
                        {
                            RoleId = "c611d808-b15c-4f18-ba1f-5ed9a4b38dd6",
                            NavigationMenuId = new Guid("84cf7f95-3c25-4b7a-952f-513adf6f0a2a")
                        },
                        new
                        {
                            RoleId = "c611d808-b15c-4f18-ba1f-5ed9a4b38dd6",
                            NavigationMenuId = new Guid("50db0ac2-6195-4c1a-95d9-8d6a7100c783")
                        },
                        new
                        {
                            RoleId = "c611d808-b15c-4f18-ba1f-5ed9a4b38dd6",
                            NavigationMenuId = new Guid("43cbcdcf-ca91-4132-abaf-09dff23d5655")
                        },
                        new
                        {
                            RoleId = "c611d808-b15c-4f18-ba1f-5ed9a4b38dd6",
                            NavigationMenuId = new Guid("b7ca7bba-de41-4233-8c23-0e8df61742f8")
                        },
                        new
                        {
                            RoleId = "c611d808-b15c-4f18-ba1f-5ed9a4b38dd6",
                            NavigationMenuId = new Guid("81f469a2-cd01-4b84-89cc-cb476fd7d0c5")
                        });
                });

            modelBuilder.Entity("WebApp.Models.ApplicationModels.Alertas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("CabecalhoAviso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("TextoAviso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Alertas");
                });

            modelBuilder.Entity("WebApp.Models.ApplicationModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int?>("UnidadeId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6cda8944-fd9b-4998-a5c9-c3469fd90796",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "21a41ca8-d2e3-46ac-b53f-925edccd1eb7",
                            Email = "atanasio.gc@exercito.pt",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "atanasio.gc@exercito.pt",
                            NormalizedUserName = "03077412",
                            PasswordHash = "AQAAAAEAACcQAAAAEKYfUQJgm2Shlb0Y27ObJK4ttO3dSheYpae6UCcL084qro1IcPBDyBtgg1LYb2uCzw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4Y6BSSJXKUHFGAEMVEUWL3XH3DEGUTRF",
                            TwoFactorEnabled = false,
                            UserName = "03077412"
                        },
                        new
                        {
                            Id = "2a93c694-5d4e-4404-8b03-2c18a5600c5c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "21a41ca8-d2e3-46ac-b53f-925edccd1eb7",
                            Email = "lourenco.kc@exercito.pt",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "lourenco.kc@exercito.pt",
                            NormalizedUserName = "15283213",
                            PasswordHash = "AQAAAAEAACcQAAAAEKYfUQJgm2Shlb0Y27ObJK4ttO3dSheYpae6UCcL084qro1IcPBDyBtgg1LYb2uCzw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4Y6BSSJXKUHFGAEMVEUWL3XH3DEGUTRF",
                            TwoFactorEnabled = false,
                            UserName = "15283213"
                        },
                        new
                        {
                            Id = "91ba41fa-2435-47db-98c2-2750107df18f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "21a41ca8-d2e3-46ac-b53f-925edccd1eb7",
                            Email = "alves.mas@exercito.pt",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "alves.mas@exercito.pt",
                            NormalizedUserName = "255667182",
                            PasswordHash = "AQAFGTEAACcQAAAAEKYfUQJgm2Shlb0Y27ObJK4ttO3dSheYpae6UCcL084qro1IcPBDyBtgg1LYb2uCzw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4Y6BSSJXKUHFGAEMVEUWL3XH3DEGUTRF",
                            TwoFactorEnabled = false,
                            UserName = "255667182"
                        });
                });

            modelBuilder.Entity("WebApp.Models.ApplicationModels.EstadoTecnologia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("ADUp")
                        .HasColumnType("bit");

                    b.Property<bool>("DBUp")
                        .HasColumnType("bit");

                    b.Property<int?>("IdTecnologia")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Ok")
                        .HasColumnType("bit");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("int");

                    b.Property<int?>("TecnologiasId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TecnologiasId");

                    b.ToTable("EstadosTecnologia");
                });

            modelBuilder.Entity("WebApp.Models.ApplicationModels.Tecnologias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Linkdocs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Linklogs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Linkreports")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Maildev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Tecnologias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "",
                            Link = "https://exe-webserver02.exercito.local/REF_DCSI",
                            Name = "nome",
                            Sigla = "nome",
                            TypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "",
                            Link = "https://exe-webserver02.exercito.local/REF_DCSI",
                            Name = "nome1",
                            Sigla = "nome1",
                            TypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            Descricao = "",
                            Link = "https://exe-webserver02.exercito.local/REF_DCSI",
                            Name = "nome2",
                            Sigla = "nome2",
                            TypeId = 3
                        },
                        new
                        {
                            Id = 4,
                            Descricao = "",
                            Link = "https://exe-webserver02.exercito.local/REF_DCSI",
                            Name = "nome3",
                            Sigla = "nome3",
                            TypeId = 4
                        });
                });

            modelBuilder.Entity("WebApp.Models.ApplicationModels.Tipos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Ordem")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tipos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ativo = true,
                            Name = "Bases de dados ORACLE",
                            Ordem = 1
                        },
                        new
                        {
                            Id = 2,
                            Ativo = true,
                            Name = "Bases de dados SQL Server",
                            Ordem = 2
                        },
                        new
                        {
                            Id = 3,
                            Ativo = true,
                            Name = "Servidores Aplicacionais",
                            Ordem = 3
                        },
                        new
                        {
                            Id = 4,
                            Ativo = true,
                            Name = "Aplicações",
                            Ordem = 4
                        });
                });

            modelBuilder.Entity("WebApp.Models.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("WebApp.Models.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Get")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentMenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Post")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("WebApp.Models.UserRolesViewModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Selected")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("UserRolesViewModel");
                });

            modelBuilder.Entity("AlertasApplicationUser", b =>
                {
                    b.HasOne("WebApp.Models.ApplicationModels.Alertas", null)
                        .WithMany()
                        .HasForeignKey("AlertasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.ApplicationModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebApp.Models.ApplicationModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebApp.Models.ApplicationModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.ApplicationModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebApp.Models.ApplicationModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp.Data.NavigationMenu", b =>
                {
                    b.HasOne("WebApp.Data.NavigationMenu", "ParentNavigationMenu")
                        .WithMany()
                        .HasForeignKey("ParentMenuId");

                    b.Navigation("ParentNavigationMenu");
                });

            modelBuilder.Entity("WebApp.Data.RoleMenuPermission", b =>
                {
                    b.HasOne("WebApp.Data.NavigationMenu", "NavigationMenu")
                        .WithMany()
                        .HasForeignKey("NavigationMenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NavigationMenu");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WebApp.Models.ApplicationModels.EstadoTecnologia", b =>
                {
                    b.HasOne("WebApp.Models.ApplicationModels.Tecnologias", null)
                        .WithMany("EstadosTecnologia")
                        .HasForeignKey("TecnologiasId");
                });

            modelBuilder.Entity("WebApp.Models.ApplicationModels.Tecnologias", b =>
                {
                    b.HasOne("WebApp.Models.ApplicationModels.Tipos", "Tipo")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tipo");
                });

            modelBuilder.Entity("WebApp.Models.UserRolesViewModel", b =>
                {
                    b.HasOne("WebApp.Models.ApplicationModels.ApplicationUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("WebApp.Models.ApplicationModels.ApplicationUser", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("WebApp.Models.ApplicationModels.Tecnologias", b =>
                {
                    b.Navigation("EstadosTecnologia");
                });
#pragma warning restore 612, 618
        }
    }
}
