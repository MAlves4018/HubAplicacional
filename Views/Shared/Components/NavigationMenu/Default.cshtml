@model List<WebApp.Models.NavigationMenuNode> 
@{
    ViewData["Title"] = "Menu";
}

<style>
    /* ============ desktop view ============ */
    @@media all and (min-width: 992px) {
	    .dropdown-menu li{ position: relative; 	}
	    .nav-item .submenu{
		    display: none;
		    position: absolute;
		    left:100%; top:-7px;
	    }
	    .nav-item .submenu-left{
		    right:100%; left:auto;
	    }
	    .dropdown-menu > li:hover{ background-color: #f1f1f1 }
	    .dropdown-menu > li:hover > .submenu{ display: block; }
    }
    /* ============ desktop view .end// ============ */

    /* ============ small devices ============ */
    @@media (max-width: 991px) {
        .dropdown-menu .dropdown-menu {
            margin-left: 0.7rem;
            margin-right: 0.7rem;
            margin-bottom: .5rem;
        }
    }
    /* ============ small devices .end// ============ */
</style>
<img src="~/img/logo-as.png" height="50" class="logo-exe ms-3"/>
<a class="tip navbar-brand text-uppercase ms-4" data-toggle="tooltip" data-placement="bottom" title="Voltar ao Início"
   asp-area="" asp-controller="Home" asp-action="Index">
    WEBAPP_NAME
</a>

<button class="navbar-toggler collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#navbarsExampleDefault" aria-controls="navbarsExampleDefault" aria-expanded="false" aria-label="Toggle navigation">
    <span class="navbar-toggler-icon"></span>
</button>
<div class="collapse navbar-collapse" id="navbarsExampleDefault">
    <ul class="navbar-nav me-auto mb-2 mb-lg-0">
        @*Level one Menu items will have null parent id *@
        @foreach (var item in Model.Where(x => x.Node.Visible).ToList())
        {
            if (!string.IsNullOrWhiteSpace(item.Node.ControllerName))
            {
                <li class="nav-item active">
                    <a class="nav-link text"  asp-controller="@item.Node.ControllerName" asp-action="@item.Node.ActionName">@item.Node.Name</a>
                </li>
            }
            else if (item.Node.IsExternal && !string.IsNullOrWhiteSpace(item.Node.ExternalUrl))
            {
                <li class="nav-item active">
                    <a target="_blank" class="nav-link text" href="@item.Node.ExternalUrl">@item.Node.Name</a>
                </li>
            }
            var children = item.Children.Where(x => x.Node.Visible).ToList();

            if (children.Any())
            {
    <li class="nav-item dropdown">
        <a class="nav-link dropdown-toggle" href="#" id="dropdown01" aria-haspopup="true" role="button" data-bs-toggle="dropdown" aria-expanded="false">@item.Node.Name</a>
        <ul class="dropdown-menu dropdown-menu-dark" aria-labelledby="navbarDropdown">
            @Html.Partial("_MenuPartial", children)
        </ul>
    </li>
            }
        }

    </ul>
    <partial name="_LoginPartial"/>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function(){
    // make it as accordion for smaller screens
    if (window.innerWidth < 992) {

      // close all inner dropdowns when parent is closed
      document.querySelectorAll('.navbar .dropdown').forEach(function(everydropdown){
        everydropdown.addEventListener('hidden.bs.dropdown', function () {
          // after dropdown is hidden, then find all submenus
            this.querySelectorAll('.submenu').forEach(function(everysubmenu){
              // hide every submenu as well
              everysubmenu.style.display = 'none';
            });
        })
      });

      document.querySelectorAll('.dropdown-menu a').forEach(function(element){
        element.addEventListener('click', function (e) {
            let nextEl = this.nextElementSibling;
            if(nextEl && nextEl.classList.contains('submenu')) {	
              // prevent opening link if link needs to open dropdown
              e.preventDefault();
              if(nextEl.style.display == 'block'){
                nextEl.style.display = 'none';
              } else {
                nextEl.style.display = 'block';
              }

            }
        });
      })
    }
    // end if innerWidth
    }); 
    // DOMContentLoaded  end
</script>